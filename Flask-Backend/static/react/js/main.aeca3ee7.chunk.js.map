{"version":3,"sources":["Pages/SignUpForm.js","Pages/SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["SignUpForm","state","email","password","name","hasAgreed","handleChange","bind","handleSubmit","e","target","value","type","checked","this","setState","preventDefault","console","log","className","onSubmit","htmlFor","id","placeholder","onChange","href","to","Component","SignInForm","App","basename","activeClassName","exact","path","component","window","answer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.aeca3ee7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SignUpForm extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            email: '',\n            password: '',\n            name: '',\n            hasAgreed: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        console.log('The form was submitted with the following data:');\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n        <div className=\"FormCenter\">\n            <form onSubmit={this.handleSubmit} className=\"FormFields\">\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"name\">Full Name</label>\n                <input type=\"text\" id=\"name\" className=\"FormField__Input\" placeholder=\"Enter your full name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              </div>\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              </div>\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              </div>\n\n              <div className=\"FormField\">\n                <label className=\"FormField__CheckboxLabel\">\n                    <input className=\"FormField__Checkbox\" type=\"checkbox\" name=\"hasAgreed\" value={this.state.hasAgreed} onChange={this.handleChange} /> I agree all statements in <a href=\"\" className=\"FormField__TermsLink\">terms of service</a>\n                </label>\n              </div>\n\n              <div className=\"FormField\">\n                  <button className=\"FormField__Button mr-20\">Sign Up</button> <Link to=\"/sign-in\" className=\"FormField__Link\">I'm already member</Link>\n              </div>\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default SignUpForm;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SignInForm extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            email: '',\n            password: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        console.log('The form was submitted with the following data:');\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n        <div className=\"FormCenter\">\n            <form onSubmit={this.handleSubmit} className=\"FormFields\" onSubmit={this.handleSubmit}>\n            <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              </div>\n\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              </div>\n\n              <div className=\"FormField\">\n                  <button className=\"FormField__Button mr-20\">Sign In</button> <Link to=\"/\" className=\"FormField__Link\">Create an account</Link>\n              </div>\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default SignInForm;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport SignUpForm from './Pages/SignUpForm';\nimport SignInForm from './Pages/SignInForm';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"/react-auth-ui/\">\n        <div className=\"App\">\n          <div className=\"App__Aside\"></div>\n          <div className=\"App__Form\">\n            <div className=\"PageSwitcher\">\n                <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign In</NavLink>\n                <NavLink exact to=\"/\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign Up</NavLink>\n              </div>\n\n              <div className=\"FormTitle\">\n                  <NavLink to=\"/sign-in\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign In</NavLink> or <NavLink exact to=\"/\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign Up</NavLink>\n              </div>\n\n              <Route exact path=\"/\" component={SignUpForm}>\n              </Route>\n              <Route path=\"/sign-in\" component={SignInForm}>\n              </Route>\n          </div>\n        <p>MY Answer = {window.answer}</p>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}